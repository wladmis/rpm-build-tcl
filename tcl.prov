#!/bin/sh
# -*- tcl -*- \
exec ${RPM_TCLSH:-/usr/bin/tclsh} "$0" "$@"

###############################################################################
# tcl.prov -- Finds provides in tcl index files (pkgIndex.tcl)
#
# Author: Sergey Bolshakov <sbolshakov@altlinux.ru>
# Created: Thu Oct 14 16:45:59 MSD 2004
# Modified: $Date: 2004/10/16 16:11:14 $
# Version: $Id: tcl.prov,v 1.4 2004/10/16 16:11:14 me Exp $
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file.  If not, write to the Free Software
# Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
##############################################################################

namespace eval ::pkg::rpm {
    if {![info exists ::env(RPM_BUILD_ROOT)]} return
    variable pkgpattern [list]
    variable modpattern [list]

    foreach p [concat $::tcl_pkgPath \
		   [expr {[info exists ::env(RPM_TCL_LIB_PATH)] ?
			  [lsort -uniq [split [string trim $::env(RPM_TCL_LIB_PATH)]]] :
			  [list]}]] {
	if {[file pathtype $p] eq {absolute}} {
	    lappend pkgpattern \
		[eval file join / $::env(RPM_BUILD_ROOT) [lrange [file split $p] 1 end] *]
	}
    }

    if {![catch {tcl::tm::path list} tmpath]} {
	if {[string match $::env(RPM_BUILD_ROOT)/* $::env(RPM_TCLSH)]} {
	    set modpattern $tmpath
	} else {
	    foreach p $tmpath {
		lappend modpattern $::env(RPM_BUILD_ROOT)$p
	    }
	}
    }
}

proc ::pkg::rpm::filter {} {
    variable modpattern
    variable pkgpattern

    set flist [split [string trim [read stdin] \n]]

    set result [list]
    foreach _ $modpattern {
	foreach p [lsearch -glob -all -inline $flist $_/*] {
	    lappend result $p
	    lassign [split [string range $p [string len $_/] end] -] n v
	    set n [string map {/ ::} $n]
	    puts "tcl\($n\)"
	    if {[string length $v] != 0} {
		set v [string map {.tm ""} $v]
		set m [lindex [split $v .] 0]
		puts "tcl\($n\)-$m = $v"
	    }
	}
    }

    set unseen [list]
    foreach _ $flist {
	if {[lsearch -exact $result $_] == -1} {
	    lappend unseen $_
	}
    }

    set result [list]
    foreach _ $pkgpattern {
	set result [concat $result [lsearch -glob -all -inline $unseen $_]]
    }
    lsort -uniq $result
}

proc ::pkg::rpm::__package {interp args} {
    switch -exact -- [lindex $args 0] {
	require {
	    if {[catch {eval package $args} v]} {
		puts stderr "warning: $v"
	    } else {
		return $v
	    }
	}
	provide {
	    catch {eval package require [lrange $args 1 end]}
	    eval package $args
	}
	default {
	    eval $interp invokehidden package $args
	}
    }
}

proc ::pkg::rpm::provides f {
    set i [interp create]

    $i eval {
	foreach _ [package names] {
	    if {$_ eq "Tcl"} continue
	    package forget $_
	}
    }

    $i hide package
    $i alias package [namespace current]::__package $i

    $i eval [list set dir [file dirname $f]]
    $i eval [list source $f]
    foreach n [$i eval [list package names]] {
	puts "tcl\($n\)"
	foreach v [$i eval [list package versions $n]] {
	    set m [lindex [split $v .] 0]
	    puts "tcl\($n\)-$m = $v"
	}
    }

    interp delete $i
}

namespace eval ::pkg::rpm {
    foreach _ [filter] {
	provides $_
    }
}
