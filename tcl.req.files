#!/bin/sh -efu

has_exec=
check_exec()
{
	local f="$1" line1=; shift
	has_exec=
	if line1=$(egrep -m1 -v '^[[:space:]]*(#|$)' "$f"); then
		set -- $line1
		if [ $# -gt 1 ] && [ "$1" = exec ]; then
			if echo "$2" |egrep -qs '\<(tclsh|wish)\>'; then
				has_exec=1
			fi
		fi
	fi
}

while IFS=$'\t' read -r f t; do
	# tcl modules
	case "$f" in
		*.tcl)
			case "$t" in
				*"symbolic link to"*) ;;
				*" text"*) echo "$f" ;;
				*) echo "${0##*/}: $f: $t" >&2 ;;
			esac
			continue ;;
	esac
# Current tcl.req analyzer cannot be used for scripts, because it
# essentially executes Tcl code.  Processing of scripts is logically
# disabled with this single clause:
	continue
	# scripts
	case "$t" in
		# handles both "#!/usr/bin/tclsh" and "#!/usr/bin/env tclsh"
		*[\ /]"tclsh script text executable"*) ;;
		*[\ /]"wish script text executable"*) ;;
		*"Bourne shell script text executable"*)
			check_exec "$f"
			[ -n "$has_exec" ] || continue ;;
		*) continue ;;
	esac
	# maybe test -x?
	echo "$f"
done
