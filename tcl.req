#!/bin/sh
# -*- tcl -*- \
exec ${RPM_TCLSH:-/usr/bin/tclsh} "$0" "$@"

###############################################################################
# tcl.req -- Finds requires for given list of tcl scripts
#
# Author: Sergey Bolshakov <sbolshakov@altlinux.ru>
# Created: Thu Oct 14 16:45:59 MSD 2004
# Modified: $Date: 2004/11/20 15:46:00 $
# Version: $Id: tcl.req,v 1.4 2004/11/20 15:46:00 me Exp $
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file.  If not, write to the Free Software
# Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
##############################################################################

namespace eval ::pkg::rpm {
    variable catched [list]
    variable requires [list]
}

proc ::pkg::rpm::addreq {type rest} {
    variable catched
    variable requires

    if {[lindex $rest 0] eq "-exact"} {
	set strict {}
	set rest [lrange $rest 1 end]
    }

    foreach {name version} $rest break

    if {$name eq "Tcl"} return

    lappend $type \
	[expr {[info exists strict] ?
	       [list $name $version =] :
	       [list $name $version {}]}]
}

proc ::pkg::rpm::__package {interp args} {
    switch -exact -- [lindex $args 0] {
	require {
	    addreq requires [lrange $args 1 end]
	}
	provide {
	    if {[lindex $args 1] eq "Tcl"} {
		eval package $args
	    }
	}
	default {
	    eval $interp invokehidden package $args
	}
    }
}

proc ::pkg::rpm::__catch {interp args} {
    set body [lindex $args 0]
    if {[llength $body] >= 3 &&
	[lindex $body 0] eq "package" &&
	[lindex $body 1] eq "require"} {
	addreq catched [lrange $body 2 end]
    } else {
	eval $interp invokehidden catch $args
    }
}

proc ::pkg::rpm::requires f {
    if {[string eq [file tail $f] "pkgIndex.tcl"]} return

    set i [interp create]

    $i hide catch
    $i alias catch [namespace current]::__catch $i

    $i hide package
    $i alias package [namespace current]::__package $i

    $i eval [list proc exit args {}]
    $i eval [list proc open args {}]
    $i eval [list proc puts args {}]
    $i eval [list proc unknown args {}]

    if {[catch {
	$i eval [list source $f]
    } err]} {
	# todo verbose
	# puts stderr "warning: $f: $err"
    }

    interp delete $i
}

namespace eval ::pkg::rpm {
    foreach _ [split [string trim [read stdin]]] {
	requires $_
    }

    set catched [lsort -uniq $catched]
    set requires [lsort -uniq $requires]

    if {[info exists ::env(RPM_TCL_REQ_METHOD)] &&
	$::env(RPM_TCL_REQ_METHOD) eq "strict"} {
	set requires [lsort -uniq [concat $catched $requires]]
    }

    if {[info exists ::env(RPM_TCL_REQ_SKIP)] &&
	[set skiplist [lsort -uniq [split [string trim $::env(RPM_TCL_REQ_SKIP)]]]] eq {}} {
	unset skiplist
    }

    foreach _ $requires {
	foreach {n v f} $_ break
	if {[info exists skiplist] &&
	    [lsearch -exact $skiplist $n] != -1} continue

	puts "tcl\($n\)"
	if {$v ne {}} {
	    if {$f eq {}} { set f ">=" }

	    set m [lindex [split $v .] 0]

	    lassign [split $v -] minv maxv

	    # strip away "alpha" and "beta" from version
	    set minv [regsub {[ab].*$} $minv ""]
	    set maxv [regsub {[ab].*$} $maxv ""]

	    if {$maxv eq {}} {
		puts "tcl\($n\)-$m $f $minv"
	    } else {
		if {$minv eq $maxv} {set f "="}

		set maxm [lindex [split $maxv .] 0]

		# check whether minv and maxv majors are the same
		# rpm cannot hanle it right if they are not
		if {$m == $maxm} {
		    puts "tcl\($n\)-$maxm $f $minv"
		}
	    }
	}
    }
}
